package com.webank.webase.chain.mgr.repository.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import com.webank.webase.chain.mgr.front.entity.FrontParam;
import com.webank.webase.chain.mgr.repository.bean.TbFront;
import org.apache.ibatis.annotations.SelectKey;

public interface TbFrontMapper {

    @Select({ "<script>", "select count(1) from tb_front " + "    where front_id in(select front_id from tb_front_group_map where 1=1 " + "    <if test=\"chainId != null\"> " + "      and chain_id = #{chainId} " + "    </if> " + "    <if test=\"groupId != null\"> " + "      and group_id = #{groupId} " + "    </if> " + "    group by front_id) " + "    <if test=\"chainId != null\"> " + "      and chain_id = #{chainId} " + "    </if> " + "    <if test=\"frontId != null\"> " + "      and front_id = #{frontId} " + "    </if> " + "    <if test=\"nodeId != null and nodeId !=''\"> " + "      and node_id = #{nodeId} " + "    </if>" + "</script>" })
    int countByParam(FrontParam param);

    @Select({ "<script>", "select * from tb_front " + "    where front_id in(select front_id from tb_front_group_map where 1=1 " + "    <if test=\"chainId != null\"> " + "      and chain_id = #{chainId} " + "    </if> " + "    <if test=\"groupId != null\"> " + "      and group_id = #{groupId} " + "    </if> " + "    group by front_id) " + "    <if test=\"chainId != null\"> " + "      and chain_id = #{chainId} " + "    </if> " + "    <if test=\"frontId != null\"> " + "      and front_id = #{frontId} " + "    </if> " + "    <if test=\"nodeId != null and nodeId !=''\"> " + "      and node_id = #{nodeId} " + "    </if>" + "</script>" })
    List<TbFront> selectByParam(FrontParam param);

    @Select({ "select * from tb_front where chain_id = #{chainId} and node_id = #{nodeId}" })
    TbFront getByChainIdAndNodeId(@Param("chainId") int chainId, @Param("nodeId") String nodeId);

    @Delete({ "delete from tb_front where chain_id=#{chainId}" })
    int deleteByChainId(@Param("chainId") int chainId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @Delete({ "delete from tb_front", "where front_id = #{frontId,jdbcType=INTEGER}" })
    int deleteByPrimaryKey(Integer frontId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @InsertProvider(type = TbFrontSqlProvider.class, method = "insertSelective")
    @SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "frontId", before = false, resultType = Integer.class)
    int insertSelective(TbFront record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @Select({ "select", "front_id, chain_id, node_id, front_ip, front_port, agency, description, create_time, ", "modify_time", "from tb_front", "where front_id = #{frontId,jdbcType=INTEGER}" })
    @Results({ @Result(column = "front_id", property = "frontId", jdbcType = JdbcType.INTEGER, id = true), @Result(column = "chain_id", property = "chainId", jdbcType = JdbcType.INTEGER), @Result(column = "node_id", property = "nodeId", jdbcType = JdbcType.VARCHAR), @Result(column = "front_ip", property = "frontIp", jdbcType = JdbcType.VARCHAR), @Result(column = "front_port", property = "frontPort", jdbcType = JdbcType.INTEGER), @Result(column = "agency", property = "agency", jdbcType = JdbcType.VARCHAR), @Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP), @Result(column = "modify_time", property = "modifyTime", jdbcType = JdbcType.TIMESTAMP) })
    TbFront selectByPrimaryKey(Integer frontId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @UpdateProvider(type = TbFrontSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TbFront record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @Options(useGeneratedKeys = true, keyProperty = "frontId", keyColumn = "front_id")
    @Insert({ "<script>", "insert into tb_front (chain_id, ", "node_id, front_ip, ", "front_port, agency, ", "description, create_time, ", "modify_time)", "values<foreach collection=\"list\" item=\"detail\" index=\"index\" separator=\",\">(#{detail.chainId,jdbcType=INTEGER}, ", "#{detail.nodeId,jdbcType=VARCHAR}, #{detail.frontIp,jdbcType=VARCHAR}, ", "#{detail.frontPort,jdbcType=INTEGER}, #{detail.agency,jdbcType=VARCHAR}, ", "#{detail.description,jdbcType=VARCHAR}, #{detail.createTime,jdbcType=TIMESTAMP}, ", "#{detail.modifyTime,jdbcType=TIMESTAMP})</foreach></script>" })
    int batchInsert(java.util.List<TbFront> list);
}
