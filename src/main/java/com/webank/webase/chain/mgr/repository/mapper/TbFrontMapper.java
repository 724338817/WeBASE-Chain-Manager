package com.webank.webase.chain.mgr.repository.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import com.webank.webase.chain.mgr.repository.bean.TbFront;

public interface TbFrontMapper {

    @Select({ "select count(1) from tb_front where front_id in " + "(select front_id from tb_front_group_map where chain_id = #{chainId} and group_id = #{groupId} group by front_id) " + " and chain_id = #{chainId} and front_id = #{frontId}" })
    int countByChainIdAndFrontIdAndGroupId(@Param("chainId") int chainId, @Param("frontId") int frontId, @Param("groupId") int groupId);

    @Select({ "select count(1) from tb_front where front_id in " + "(select front_id from tb_front_group_map where chain_id = #{chainId} and group_id = #{groupId} group by front_id) " + " and chain_id = #{chainId}" })
    int countByChainIdAndNodeId(@Param("chainId") int chainId, @Param("nodeId") String nodeId);

    @Select({ "select * from tb_front where front_id in " + "(select front_id from tb_front_group_map where chain_id = #{chainId} and group_id = #{groupId} group by front_id) " + " and chain_id = #{chainId} and front_id = #{frontId}" })
    List<TbFront> selectByChainIdAndFrontIdAndGroupId(@Param("chainId") int chainId, @Param("frontId") int frontId, @Param("groupId") int groupId);

    @Select({ "select * from tb_front where front_id in " + "(select front_id from tb_front_group_map where chain_id = #{chainId} group by front_id) " + " and chain_id = #{chainId}" })
    List<TbFront> selectByChainId(@Param("chainId") int chainId);

    @Select({ "select * from tb_front where chain_id = #{chainId} and node_id = #{nodeId}" })
    TbFront getByChainIdAndNodeId(@Param("chainId") int chainId, @Param("nodeId") String nodeId);

    @Delete({ "delete from tb_front where chain_id=#{chainId}" })
    int deleteByChainId(@Param("chainId") int chainId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @Delete({ "delete from tb_front", "where front_id = #{frontId,jdbcType=INTEGER}" })
    int deleteByPrimaryKey(Integer frontId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @InsertProvider(type = TbFrontSqlProvider.class, method = "insertSelective")
    int insertSelective(TbFront record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @Select({ "select", "front_id, chain_id, node_id, front_ip, front_port, agency, description, create_time, ", "modify_time", "from tb_front", "where front_id = #{frontId,jdbcType=INTEGER}" })
    @Results({ @Result(column = "front_id", property = "frontId", jdbcType = JdbcType.INTEGER, id = true), @Result(column = "chain_id", property = "chainId", jdbcType = JdbcType.INTEGER), @Result(column = "node_id", property = "nodeId", jdbcType = JdbcType.VARCHAR), @Result(column = "front_ip", property = "frontIp", jdbcType = JdbcType.VARCHAR), @Result(column = "front_port", property = "frontPort", jdbcType = JdbcType.INTEGER), @Result(column = "agency", property = "agency", jdbcType = JdbcType.VARCHAR), @Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP), @Result(column = "modify_time", property = "modifyTime", jdbcType = JdbcType.TIMESTAMP) })
    TbFront selectByPrimaryKey(Integer frontId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @UpdateProvider(type = TbFrontSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TbFront record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    @Options(useGeneratedKeys = true, keyProperty = "frontId", keyColumn = "front_id")
    @Insert({ "<script>", "insert into tb_front (front_id, ", "chain_id, node_id, ", "front_ip, front_port, ", "agency, description, ", "create_time, modify_time)", "values<foreach collection=\"list\" item=\"detail\" index=\"index\" separator=\",\">(#{detail.frontId,jdbcType=INTEGER}, ", "#{detail.chainId,jdbcType=INTEGER}, #{detail.nodeId,jdbcType=VARCHAR}, ", "#{detail.frontIp,jdbcType=VARCHAR}, #{detail.frontPort,jdbcType=INTEGER}, ", "#{detail.agency,jdbcType=VARCHAR}, #{detail.description,jdbcType=VARCHAR}, ", "#{detail.createTime,jdbcType=TIMESTAMP}, #{detail.modifyTime,jdbcType=TIMESTAMP})</foreach></script>" })
    int batchInsert(java.util.List<TbFront> list);
}
