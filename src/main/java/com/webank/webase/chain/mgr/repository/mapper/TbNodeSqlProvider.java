package com.webank.webase.chain.mgr.repository.mapper;

import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.jdbc.SQL;
import com.webank.webase.chain.mgr.node.entity.NodeParam;
import com.webank.webase.chain.mgr.repository.bean.TbNode;

public class TbNodeSqlProvider {

    public String update(TbNode tbNode) {
        SQL sql = new SQL();
        sql.UPDATE("tb_node");
        sql.SET("modify_time=NOW()");
        if (tbNode.getBlockNumber() != null) {
            sql.SET("block_number = #{blockNumber}");
        }
        if (tbNode.getPbftView() != null) {
            sql.SET("pbft_view = #{pbftView}");
        }
        if (StringUtils.isNotBlank(tbNode.getDescription())) {
            sql.SET("description = #{description}");
        }
        if (tbNode.getNodeActive() != null) {
            sql.SET("node_active = #{nodeActive}");
        }
        sql.WHERE("node_id=#{nodeId} and group_id=#{groupId}");
        return sql.toString();
    }

    public String selectByParam(NodeParam param) {
        SQL sql = new SQL();
        sql.SELECT(ALL_COLUMN_FIELDS).FROM("tb_node");
        this.applyNodeParam(sql, param);
        if (param.getStart() != null && param.getPageSize() != null) {
            return String.format("%s limit #{start},#{pageSize}", sql.toString());
        }
        return sql.toString();
    }

    public String countByParam(NodeParam param) {
        SQL sql = new SQL();
        sql.SELECT("count(1)").FROM("tb_node");
        this.applyNodeParam(sql, param);
        return sql.toString();
    }

    public SQL applyNodeParam(SQL sql, NodeParam param) {
        if (param.getChainId() != null) {
            sql.WHERE("chain_id = #{chainId}");
        }
        if (param.getGroupId() != null) {
            sql.WHERE("group_id = #{groupId}");
        }
        if (StringUtils.isNotBlank(param.getNodeId())) {
            sql.WHERE("node_id = #{nodeId}");
        }
        if (param.getP2pPort() != null) {
            sql.WHERE("p2p_port = #{p2pPort}");
        }
        if (StringUtils.isNotBlank(param.getNodeIp())) {
            sql.WHERE("node_ip = #{nodeIp}");
        }
        if (StringUtils.isNotBlank(param.getFlagSortedByTime())) {
            sql.ORDER_BY(String.format("modify_time %s",param.getFlagSortedByTime()));
        }
        return sql;
    }

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tb_node
     *
     * @mbg.generated
     */
    public static final String ALL_COLUMN_FIELDS = "node_id,chain_id,group_id,node_name,node_ip,p2p_port,block_number,pbft_view,node_active,description,create_time,modify_time";

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_node
     *
     * @mbg.generated
     */
    public String insertSelective(TbNode record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_node");
        if (record.getNodeId() != null) {
            sql.VALUES("node_id", "#{nodeId,jdbcType=VARCHAR}");
        }
        if (record.getChainId() != null) {
            sql.VALUES("chain_id", "#{chainId,jdbcType=INTEGER}");
        }
        if (record.getGroupId() != null) {
            sql.VALUES("group_id", "#{groupId,jdbcType=INTEGER}");
        }
        if (record.getNodeName() != null) {
            sql.VALUES("node_name", "#{nodeName,jdbcType=VARCHAR}");
        }
        if (record.getNodeIp() != null) {
            sql.VALUES("node_ip", "#{nodeIp,jdbcType=VARCHAR}");
        }
        if (record.getP2pPort() != null) {
            sql.VALUES("p2p_port", "#{p2pPort,jdbcType=INTEGER}");
        }
        if (record.getBlockNumber() != null) {
            sql.VALUES("block_number", "#{blockNumber,jdbcType=BIGINT}");
        }
        if (record.getPbftView() != null) {
            sql.VALUES("pbft_view", "#{pbftView,jdbcType=BIGINT}");
        }
        if (record.getNodeActive() != null) {
            sql.VALUES("node_active", "#{nodeActive,jdbcType=TINYINT}");
        }
        if (record.getDescription() != null) {
            sql.VALUES("description", "#{description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.VALUES("modify_time", "#{modifyTime,jdbcType=TIMESTAMP}");
        }
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_node
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TbNode record) {
        SQL sql = new SQL();
        sql.UPDATE("tb_node");
        if (record.getNodeName() != null) {
            sql.SET("node_name = #{nodeName,jdbcType=VARCHAR}");
        }
        if (record.getNodeIp() != null) {
            sql.SET("node_ip = #{nodeIp,jdbcType=VARCHAR}");
        }
        if (record.getP2pPort() != null) {
            sql.SET("p2p_port = #{p2pPort,jdbcType=INTEGER}");
        }
        if (record.getBlockNumber() != null) {
            sql.SET("block_number = #{blockNumber,jdbcType=BIGINT}");
        }
        if (record.getPbftView() != null) {
            sql.SET("pbft_view = #{pbftView,jdbcType=BIGINT}");
        }
        if (record.getNodeActive() != null) {
            sql.SET("node_active = #{nodeActive,jdbcType=TINYINT}");
        }
        if (record.getDescription() != null) {
            sql.SET("description = #{description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.SET("modify_time = #{modifyTime,jdbcType=TIMESTAMP}");
        }
        sql.WHERE("node_id = #{nodeId,jdbcType=VARCHAR}");
        sql.WHERE("chain_id = #{chainId,jdbcType=INTEGER}");
        sql.WHERE("group_id = #{groupId,jdbcType=INTEGER}");
        return sql.toString();
    }
}
